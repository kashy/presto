"""Get or change the authenticated user's tip to this person.
"""
from decimal import InvalidOperation

from aspen import Response
from gittip.exceptions import BadAmount
from gittip.models.participant import Participant

[-----------------------------------------------------------------------------]

out = {}
if not user.ANON:

    # Get tipper and tippee.
    # ======================
    # XXX We could/should enforce that tips cannot be pledged at all to locked
    # accounts.

    tipper = user.participant
    tippee = Participant.from_username(path['username'])


    # Get and maybe set amount.
    # =========================

    first_time_tipper = None
    if tippee == tipper:
        amount = None
    elif POST and 'amount' in body:
        try:
            amount, first_time_tipper = tipper.set_tip_to( tippee.username
                                                         , body['amount']
                                                          )
        except (InvalidOperation, ValueError, BadAmount):
            raise Response(400, "bad amount")
    else:
        amount = tipper.get_tip_to(tippee.username)

    total_giving = tipper.get_dollars_giving()
    total_receiving = tipper.get_dollars_receiving()
    total_receiving_tippee = tippee.get_dollars_receiving()

    out = { "amount": str(amount)
          , "total_giving": str(total_giving)
          , "total_receiving": str(total_receiving)
          , "total_receiving_tippee": str(total_receiving_tippee)
           }
    if first_time_tipper is not None:
        out["first_time"] = first_time_tipper


response.body = out
