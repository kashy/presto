"""
"""
import balanced
import urllib

import gittip
from aspen import Response
from gittip import billing

base_url = gittip.canonical_scheme + "://" + gittip.canonical_host

[-----------------------------------------------------------------------------]

if user.ANON:
    raise Response(404)

request.allow('POST')

out = {}
redirect_to = base_url + '/bank-account-complete.html'

if body.get('action') == 'delete':
    billing.clear(website.db, u"bank account", user.participant.username, user.participant.balanced_customer_href)
elif body.get('action') == 'store-error':
    billing.store_error(website.db, u"bank account", user.participant.username, body['msg'])
else:

    # Get a balanced account.
    # =======================
    # This will create one if user.balanced_customer_href is None.

    balanced_account = billing.get_balanced_account( website.db
                                                   , user.participant.username
                                                   , user.participant.balanced_customer_href
                                                    )


    # Ensure the user is a merchant.
    # ==============================
    # This will possibly fail with 400 if formatted badly, or 300 if we cannot
    # identify the merchant.

    out = {}
    if balanced_account.merchant_status != 'underwritten':

        balanced_account.name = body.get('name')
        balanced_account.address['line1'] = body.get('street_address')
        balanced_account.address['postal_code'] = body.get('postal_code')
        balanced_account.address['state'] = body.get('region')
        balanced_account.phone = body.get('phone_number')
        balanced_account.dob_month = body.get('dob_month')
        balanced_account.dob_year = body.get('dob_year')
        balanced_account.meta['dob_day'] = body.get('dob_day')
        balanced_account.ssn_last4 = body.get('ssn_last4')

        try:
            balanced_account.save()
        except balanced.exc.HTTPError as err:
            out = {"problem": "Problem", "error": err.message}

        if balanced_account.merchant_status != 'underwritten':
            out = { 'problem': 'More Info Needed'
                  , 'error': 'Unable to verify your identity'
                   }


    # No errors? Great! Let's add the bank account.
    # =============================================

    if not out:

        # Clear out any old ones first.
        billing.clear( website.db
                     , u"bank account"
                     , user.participant.username
                     , balanced_account.href
                      )

        bank_account_uri = body['bank_account_uri']
        try:
            billing.associate( website.db
                             , u"bank account"
                             , user.participant.username
                             , balanced_account
                             , bank_account_uri
                              )
        except balanced.exc.HTTPError as err:
            out = {"problem": "Problem", "error": err.message}
        else:
            out = {"problem": ""}

response.body = out
