from aspen import Response

[---------]
if user.ANON:
    raise Response(404)
if not POST:
    raise Response(405)

if body['should_transfer'] != 'yes':
    request.redirect('/about/me.html')

platform = body['platform']
if not hasattr(website.platforms, platform):
    raise Response(400, "bad platform: %s" % platform)

user_id = body['user_id']
if not user_id:
    raise Response(400, "no user_id")


# Look for a connect_token.
# =========================
# CSRF isn't enough to protect against unauthorized take_overs. Someone need
# only find their own CSRF header and use that. We need a token specific to the
# connection request.

connect_key = (user.participant.username, platform, user_id)
expected = website.connect_tokens.pop(connect_key, None)
actual = body.get('connect_token')
if expected is None or actual != expected:
    msg = str("Is %s gaming us? %s:%s" % (user.participant.username, expected, actual))
    raise Response(400, msg)

user.participant.take_over((platform, user_id), have_confirmation=True)
request.redirect('/about/me.html')

[---------]
